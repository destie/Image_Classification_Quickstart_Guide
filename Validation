##########################################################################################################################################
##############################This code validates on a single image or multiple images for your separate holdout dataset##################

#Change the 512 here to your image height and width respectively
img = cv2.imread('filepathhere')
img = cv2.resize(img,(512,512))
img = np.reshape(img,[1,512,512,3])

classes = model.predict_classes(img)

#Validate on a whole new dataset:

#Change these parameters for your data
img_height = 
img_width = 

#Load your  model
model = tf.keras.models.load_model(r'C:\Users\Satvik\Desktop\ProstateX2\CSvsNCS\csvsncsresnetreger1.h5') 

#Create your validation directory - this should mirror the data used to create the model
val_ds = tf.keras.preprocessing.image_dataset_from_directory(
  directory,
  image_size=(img_height, img_width))
accuracy = model.evaluate(val_ds)



#How to get ROC and AUC from model
from sklearn.metrics import roc_curve,roc_auc_score
preds = model.predict(val_ds)

#Import packages and generate labels for data
import numpy as np
labels = np.concatenate([y for x, y in val_ds], axis=0)

#Calculate metrics
fpr, tpr, threshold = roc_curve(labels, preds)

#Plot the ROC curve
def plot_roc_curve(fpr,tpr): 
    plt.plot(fpr,tpr) 
    plt.axis([0,1,0,1]) 
    plt.xlabel('False Positive Rate') 
    plt.ylabel('True Positive Rate') 
    plt.show()    
  
plot_roc_curve (fpr,tpr)

#Generate the AUC score
auc_score_PX=roc_auc_score(labels,preds)


#Cross Validation
from sklearn.model_selection import KFold

sklearn.model_selection.KFold(n_splits=5, *, shuffle=False, random_state=None) 


j = 0

for train_idx, val_idx in list(kfold.split(train_x,train_y)):
    x_train_df = df.iloc[train_idx]
    x_valid_df = df.iloc[val_idx]
    j+=1

  train_ds = tf.keras.preprocessing.image_dataset_from_directory(
  directory,
  validation_split=0.2,
  subset="training",
… 
###Same code as your model goes here then evaluate for each kfold
   accuracy = model.evaluate( val_ds)[1])
   print(“Kfold = “ + str(j) + str(accuracy))

